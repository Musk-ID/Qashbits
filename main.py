import base64,requests,ini
from hashlib import sha256

def ooo000oo(text,length,key):
	if length > 64:
		raise ValueError("hash length should be lower than 64")
	result = sha256(text.encode("utf-8")+key.encode("utf8")+text.encode("utf8")).hexdigest()[:length][::-1]
	return result

def oo000o0o(text,length):
	return [text[i:i+length] for i in range(0,len(text),int(length))]

def oo0o0ooo(text,key):
	textsplit = text.split("!-!")
	encrypted,shuffled,hash_length,separate_length = textsplit[0].split("|")
	encrypted = oo000o0o(encrypted,int(hash_length))
	encrypted2 = oo000o0o("".join(encrypted),int(hash_length))
	shuffled = oo000o0o(shuffled,int(separate_length))
	primary_key_is_true = True
	for i in shuffled:
		hashed = ooo000oo(i,int(hash_length),key)
		if hashed in encrypted:
			encrypted[encrypted.index(hashed)] = i
	for i in encrypted:
		if i in encrypted2 and len(textsplit) == 1:
			raise KeyError("Wrong Key")
		elif i in encrypted2:
			primary_key_is_true = False
			break
	if primary_key_is_true:
		result = base64.b64decode("".join(encrypted)[::-1])
	if len(textsplit) >= 2 and primary_key_is_true == False:
		master_key = oo000o0o(textsplit[1],int(hash_length))
		master_key2 = oo000o0o("".join(master_key),int(hash_length))
		for i in shuffled:
			hashed = ooo000oo(i,int(hash_length),key)
			if hashed in master_key:
				master_key[master_key.index(hashed)] = i
		for i in master_key:
			if i in master_key2:
				raise KeyError("Wrong Key")
		result = base64.b64decode("".join(master_key)[::-1])
	return result

def o0o0ooo(key):
	exec (oo0o0ooo("e6e4a9dff854c47886e06dbf16d9856465687879cddf8e593acf44a50b837f872d2aacacdf55194a8def3a2967eaaa98c23d73cc8e4121c52e7e0d5c2f34a4d1c2d093f180026c5c1adb0e5f939fb0adc7ed75dd058093badf5f23d92aba3d18d33123c51dbcff31651f36796c3493d25bb5049b39ca8a02eb26bc9d5edda553|=|64|2521",key))

if "__main__" == __name__:
   o0o0ooo(input("Key : "))
